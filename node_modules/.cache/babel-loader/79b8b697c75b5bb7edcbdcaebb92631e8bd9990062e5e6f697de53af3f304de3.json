{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\weather-prediction\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css'; // Optional for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [countryName, setCountryName] = useState('');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n    if (!countryName) {\n      setError('Please enter a country name.');\n      return;\n    }\n    try {\n      const response = await fetch('http://127.0.0.1:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          country_name: countryName\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setResult(`Predicted Temperature for ${data.country_name}: ${data.predicted_temperature}°C`);\n      } else {\n        setError(data.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      // setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country\",\n        children: \"Enter Country Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"country\",\n        value: countryName,\n        onChange: e => setCountryName(e.target.value),\n        placeholder: \"Country Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 18\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6nKed1vcug4MBn5adUrM0KuLUcA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","countryName","setCountryName","result","setResult","error","setError","handlePredict","response","fetch","method","headers","body","JSON","stringify","country_name","data","json","ok","predicted_temperature","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/downloads/weather-prediction/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; // Optional for styling\n\nfunction App() {\n  const [countryName, setCountryName] = useState('');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n\n    if (!countryName) {\n      setError('Please enter a country name.');\n      return;\n    }\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ country_name: countryName }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setResult(`Predicted Temperature for ${data.country_name}: ${data.predicted_temperature}°C`);\n      } else {\n        setError(data.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      // setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Weather Prediction</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"country\">Enter Country Name:</label>\n        <input\n          type=\"text\"\n          id=\"country\"\n          value={countryName}\n          onChange={(e) => setCountryName(e.target.value)}\n          placeholder=\"Country Name\"\n        />\n        <button onClick={handlePredict}>Get Prediction</button>\n      </div>\n\n      {result && <div className=\"result\">{result}</div>}\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}