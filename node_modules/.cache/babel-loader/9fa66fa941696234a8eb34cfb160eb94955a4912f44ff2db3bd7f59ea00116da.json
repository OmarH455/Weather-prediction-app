{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\weather-prediction\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [resolvedTown, setResolvedTown] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [towns, setTowns] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries and towns/cities when the component loads\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        // Fetch countries\n        const countryResponse = await fetch('http://127.0.0.1:5000/countries');\n        const countryData = await countryResponse.json();\n        if (countryResponse.ok) {\n          setCountries(countryData.countries);\n        } else {\n          setError(countryData.error || 'Failed to fetch countries.');\n        }\n\n        // Fetch towns/cities\n        const townResponse = await fetch('http://127.0.0.1:5000/towns');\n        const townData = await townResponse.json();\n        if (townResponse.ok) {\n          setTowns(townData.towns);\n        } else {\n          setError(townData.error || 'Failed to fetch towns.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n    fetchLocations();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n    if (!locationInput && !resolvedCountry && !resolvedTown) {\n      setError('Please enter a location, select a country, or select a town/city.');\n      return;\n    }\n    try {\n      let location = resolvedTown || resolvedCountry;\n\n      // If user input is provided, resolve it to a location using the backend\n      if (locationInput) {\n        const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(locationInput)}`);\n        const resolveData = await resolveResponse.json();\n        if (!resolveResponse.ok) {\n          setError(resolveData.error || 'Failed to resolve location.');\n          return;\n        }\n        location = resolveData.country; // Can be modified to resolve to a town if needed\n      }\n\n      // Fetch predictions for the resolved location\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(location)}`);\n      const predictData = await predictResponse.json();\n      if (predictResponse.ok) {\n        const {\n          average,\n          max,\n          min\n        } = predictData.summary;\n        setResult(`Predicted data for ${location}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"location-input\",\n        children: \"Enter Location (e.g., Zip Code, GPS, City):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"location-input\",\n        value: locationInput,\n        onChange: e => setLocationInput(e.target.value),\n        placeholder: \"Enter location here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-select\",\n        children: \"Or Select a Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"country-select\",\n        value: resolvedCountry,\n        onChange: e => {\n          setResolvedCountry(e.target.value);\n          setResolvedTown(''); // Clear town when a new country is selected\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select a Country --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: [country.charAt(0).toUpperCase() + country.slice(1), \" \"]\n        }, country, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"town-select\",\n        children: \"Or Select a Town/City:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"town-select\",\n        value: resolvedTown,\n        onChange: e => {\n          setResolvedTown(e.target.value);\n          setResolvedCountry(''); // Clear country when a new town is selected\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select a Town/City --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), towns.map(town => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: town,\n          children: [town.charAt(0).toUpperCase() + town.slice(1), \" \"]\n        }, town, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"htwIPsOhrQOBDrpaUKxaZM4yDs4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","locationInput","setLocationInput","resolvedCountry","setResolvedCountry","resolvedTown","setResolvedTown","countries","setCountries","towns","setTowns","result","setResult","error","setError","fetchLocations","countryResponse","fetch","countryData","json","ok","townResponse","townData","err","handlePredict","location","resolveResponse","encodeURIComponent","resolveData","country","predictResponse","predictData","average","max","min","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","placeholder","map","charAt","toUpperCase","slice","town","onClick","_c","$RefreshReg$"],"sources":["D:/downloads/weather-prediction/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [resolvedTown, setResolvedTown] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [towns, setTowns] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries and towns/cities when the component loads\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        // Fetch countries\n        const countryResponse = await fetch('http://127.0.0.1:5000/countries');\n        const countryData = await countryResponse.json();\n        if (countryResponse.ok) {\n          setCountries(countryData.countries);\n        } else {\n          setError(countryData.error || 'Failed to fetch countries.');\n        }\n\n        // Fetch towns/cities\n        const townResponse = await fetch('http://127.0.0.1:5000/towns');\n        const townData = await townResponse.json();\n        if (townResponse.ok) {\n          setTowns(townData.towns);\n        } else {\n          setError(townData.error || 'Failed to fetch towns.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n\n    fetchLocations();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n\n    if (!locationInput && !resolvedCountry && !resolvedTown) {\n      setError('Please enter a location, select a country, or select a town/city.');\n      return;\n    }\n\n    try {\n      let location = resolvedTown || resolvedCountry;\n\n      // If user input is provided, resolve it to a location using the backend\n      if (locationInput) {\n        const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(locationInput)}`);\n        const resolveData = await resolveResponse.json();\n\n        if (!resolveResponse.ok) {\n          setError(resolveData.error || 'Failed to resolve location.');\n          return;\n        }\n        location = resolveData.country; // Can be modified to resolve to a town if needed\n      }\n\n      // Fetch predictions for the resolved location\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(location)}`);\n      const predictData = await predictResponse.json();\n\n      if (predictResponse.ok) {\n        const { average, max, min } = predictData.summary;\n        setResult(`Predicted data for ${location}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Weather Prediction</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"location-input\">Enter Location (e.g., Zip Code, GPS, City):</label>\n        <input\n          type=\"text\"\n          id=\"location-input\"\n          value={locationInput}\n          onChange={(e) => setLocationInput(e.target.value)}\n          placeholder=\"Enter location here\"\n        />\n\n        <label htmlFor=\"country-select\">Or Select a Country:</label>\n        <select\n          id=\"country-select\"\n          value={resolvedCountry}\n          onChange={(e) => {\n            setResolvedCountry(e.target.value);\n            setResolvedTown(''); // Clear town when a new country is selected\n          }}\n        >\n          <option value=\"\">-- Select a Country --</option>\n          {countries.map((country) => (\n            <option key={country} value={country}>\n              {country.charAt(0).toUpperCase() + country.slice(1)} {/* Capitalize */}\n            </option>\n          ))}\n        </select>\n\n        <label htmlFor=\"town-select\">Or Select a Town/City:</label>\n        <select\n          id=\"town-select\"\n          value={resolvedTown}\n          onChange={(e) => {\n            setResolvedTown(e.target.value);\n            setResolvedCountry(''); // Clear country when a new town is selected\n          }}\n        >\n          <option value=\"\">-- Select a Town/City --</option>\n          {towns.map((town) => (\n            <option key={town} value={town}>\n              {town.charAt(0).toUpperCase() + town.slice(1)} {/* Capitalize */}\n            </option>\n          ))}\n        </select>\n\n        <button onClick={handlePredict}>Get Prediction</button>\n      </div>\n\n      {result && (\n        <div className=\"result\">\n          <h3>Predicted Data</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}