{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\weather-prediction\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [resolvedTown, setResolvedTown] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [towns, setTowns] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\n  // Fetch the list of countries and towns/cities when the component loads\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        // Fetch countries\n        const countryResponse = await fetch('${BACKEND_URL}/countries');\n        const countryData = await countryResponse.json();\n        if (countryResponse.ok) {\n          setCountries(countryData.countries.map(country => ({\n            value: country,\n            label: country.charAt(0).toUpperCase() + country.slice(1)\n          })));\n        } else {\n          setError(countryData.error || 'Failed to fetch countries.');\n        }\n\n        // Fetch towns/cities\n        const townResponse = await fetch('$BACKEND_URL/towns');\n        const townData = await townResponse.json();\n        if (townResponse.ok) {\n          setTowns(townData.towns.map(town => ({\n            value: town,\n            label: town.charAt(0).toUpperCase() + town.slice(1)\n          })));\n        } else {\n          setError(townData.error || 'Failed to fetch towns.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n    fetchLocations();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n    if (!locationInput && !resolvedTown && !resolvedCountry) {\n      setError('Please enter or select a location.');\n      return;\n    }\n    try {\n      const response = await fetch(`${BACKEND_URL}/predict?country=${encodeURIComponent((resolvedTown || resolvedCountry || locationInput).toLowerCase())}`);\n      const data = await response.json();\n      if (response.ok) {\n        const {\n          average,\n          max,\n          min\n        } = data.summary;\n        setResult(`Predicted data:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n\n        // Clear inputs and reset dropdowns after successful prediction\n        setLocationInput(''); // Clear text input\n        setResolvedCountry(''); // Reset country dropdown\n        setResolvedTown(''); // Reset town dropdown\n      } else {\n        setError(data.error || 'Prediction failed.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"location-input\",\n        children: \"Enter Location (e.g., Zip Code, GPS, City):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"location-input\",\n        value: locationInput,\n        onChange: e => setLocationInput(e.target.value),\n        placeholder: \"Enter location here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-select\",\n        children: \"Or Select a Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"country-select\",\n        options: countries,\n        value: countries.find(option => option.value === resolvedCountry),\n        onChange: selectedOption => {\n          setResolvedCountry((selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) || '');\n          setResolvedTown(''); // Clear town when a new country is selected\n        },\n        placeholder: \"Select a country...\",\n        isClearable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"town-select\",\n        children: \"Select or Type a Town/City:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"town-select\",\n        options: towns,\n        value: towns.find(option => option.value === resolvedTown),\n        onChange: selectedOption => {\n          setResolvedTown((selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) || '');\n          setLocationInput(''); // Clear manual input when a town is selected\n        },\n        onInputChange: inputValue => setLocationInput(inputValue) // Update input dynamically\n        ,\n        placeholder: \"Select or type a town/city...\",\n        isClearable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"htwIPsOhrQOBDrpaUKxaZM4yDs4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","App","_s","locationInput","setLocationInput","resolvedCountry","setResolvedCountry","resolvedTown","setResolvedTown","countries","setCountries","towns","setTowns","result","setResult","error","setError","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","fetchLocations","countryResponse","fetch","countryData","json","ok","map","country","value","label","charAt","toUpperCase","slice","townResponse","townData","town","err","handlePredict","response","encodeURIComponent","toLowerCase","data","average","max","min","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","e","target","placeholder","options","find","option","selectedOption","isClearable","onInputChange","inputValue","onClick","_c","$RefreshReg$"],"sources":["D:/downloads/weather-prediction/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport './App.css';\n\nfunction App() {\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [resolvedTown, setResolvedTown] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [towns, setTowns] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\n  // Fetch the list of countries and towns/cities when the component loads\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        // Fetch countries\n        const countryResponse = await fetch('${BACKEND_URL}/countries');\n        const countryData = await countryResponse.json();\n        if (countryResponse.ok) {\n          setCountries(countryData.countries.map((country) => ({\n            value: country,\n            label: country.charAt(0).toUpperCase() + country.slice(1),\n          })));\n        } else {\n          setError(countryData.error || 'Failed to fetch countries.');\n        }\n\n        // Fetch towns/cities\n        const townResponse = await fetch('$BACKEND_URL/towns');\n        const townData = await townResponse.json();\n        if (townResponse.ok) {\n          setTowns(townData.towns.map((town) => ({\n            value: town,\n            label: town.charAt(0).toUpperCase() + town.slice(1),\n          })));\n        } else {\n          setError(townData.error || 'Failed to fetch towns.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n\n    fetchLocations();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n\n    if (!locationInput && !resolvedTown && !resolvedCountry) {\n      setError('Please enter or select a location.');\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `${BACKEND_URL}/predict?country=${encodeURIComponent((resolvedTown || resolvedCountry || locationInput).toLowerCase())}`\n      );\n      const data = await response.json();\n\n      if (response.ok) {\n        const { average, max, min } = data.summary;\n        setResult(`Predicted data:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n\n        // Clear inputs and reset dropdowns after successful prediction\n        setLocationInput(''); // Clear text input\n        setResolvedCountry(''); // Reset country dropdown\n        setResolvedTown(''); // Reset town dropdown\n      } else {\n        setError(data.error || 'Prediction failed.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Weather Prediction</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"location-input\">Enter Location (e.g., Zip Code, GPS, City):</label>\n        <input\n          type=\"text\"\n          id=\"location-input\"\n          value={locationInput}\n          onChange={(e) => setLocationInput(e.target.value)}\n          placeholder=\"Enter location here\"\n        />\n\n        <label htmlFor=\"country-select\">Or Select a Country:</label>\n        <Select\n          id=\"country-select\"\n          options={countries}\n          value={countries.find((option) => option.value === resolvedCountry)}\n          onChange={(selectedOption) => {\n            setResolvedCountry(selectedOption?.value || '');\n            setResolvedTown(''); // Clear town when a new country is selected\n          }}\n          placeholder=\"Select a country...\"\n          isClearable\n        />\n\n        <label htmlFor=\"town-select\">Select or Type a Town/City:</label>\n        <Select\n          id=\"town-select\"\n          options={towns}\n          value={towns.find((option) => option.value === resolvedTown)}\n          onChange={(selectedOption) => {\n            setResolvedTown(selectedOption?.value || '');\n            setLocationInput(''); // Clear manual input when a town is selected\n          }}\n          onInputChange={(inputValue) => setLocationInput(inputValue)} // Update input dynamically\n          placeholder=\"Select or type a town/city...\"\n          isClearable\n        />\n\n        <button onClick={handlePredict}>Get Prediction</button>\n      </div>\n\n      {result && (\n        <div className=\"result\">\n          <h3>Predicted Data</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMqB,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;;EAErD;EACAvB,SAAS,CAAC,MAAM;IACd,MAAMwB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF;QACA,MAAMC,eAAe,GAAG,MAAMC,KAAK,CAAC,0BAA0B,CAAC;QAC/D,MAAMC,WAAW,GAAG,MAAMF,eAAe,CAACG,IAAI,CAAC,CAAC;QAChD,IAAIH,eAAe,CAACI,EAAE,EAAE;UACtBhB,YAAY,CAACc,WAAW,CAACf,SAAS,CAACkB,GAAG,CAAEC,OAAO,KAAM;YACnDC,KAAK,EAAED,OAAO;YACdE,KAAK,EAAEF,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,OAAO,CAACK,KAAK,CAAC,CAAC;UAC1D,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,MAAM;UACLjB,QAAQ,CAACQ,WAAW,CAACT,KAAK,IAAI,4BAA4B,CAAC;QAC7D;;QAEA;QACA,MAAMmB,YAAY,GAAG,MAAMX,KAAK,CAAC,oBAAoB,CAAC;QACtD,MAAMY,QAAQ,GAAG,MAAMD,YAAY,CAACT,IAAI,CAAC,CAAC;QAC1C,IAAIS,YAAY,CAACR,EAAE,EAAE;UACnBd,QAAQ,CAACuB,QAAQ,CAACxB,KAAK,CAACgB,GAAG,CAAES,IAAI,KAAM;YACrCP,KAAK,EAAEO,IAAI;YACXN,KAAK,EAAEM,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGI,IAAI,CAACH,KAAK,CAAC,CAAC;UACpD,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,MAAM;UACLjB,QAAQ,CAACmB,QAAQ,CAACpB,KAAK,IAAI,wBAAwB,CAAC;QACtD;MACF,CAAC,CAAC,OAAOsB,GAAG,EAAE;QACZrB,QAAQ,CAAC,0DAA0D,CAAC;MACtE;IACF,CAAC;IAEDK,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCxB,SAAS,CAAC,IAAI,CAAC;IACfE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI,CAACb,aAAa,IAAI,CAACI,YAAY,IAAI,CAACF,eAAe,EAAE;MACvDW,QAAQ,CAAC,oCAAoC,CAAC;MAC9C;IACF;IAEA,IAAI;MACF,MAAMuB,QAAQ,GAAG,MAAMhB,KAAK,CAC1B,GAAGN,WAAW,oBAAoBuB,kBAAkB,CAAC,CAACjC,YAAY,IAAIF,eAAe,IAAIF,aAAa,EAAEsC,WAAW,CAAC,CAAC,CAAC,EACxH,CAAC;MACD,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACd,IAAI,CAAC,CAAC;MAElC,IAAIc,QAAQ,CAACb,EAAE,EAAE;QACf,MAAM;UAAEiB,OAAO;UAAEC,GAAG;UAAEC;QAAI,CAAC,GAAGH,IAAI,CAACI,OAAO;QAC1ChC,SAAS,CAAC,yCAAyC6B,OAAO,0BAA0BC,GAAG,0BAA0BC,GAAG,EAAE,CAAC;;QAEvH;QACAzC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;QACtBE,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;QACxBE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;MACvB,CAAC,MAAM;QACLQ,QAAQ,CAAC0B,IAAI,CAAC3B,KAAK,IAAI,oBAAoB,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACZrB,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;EAED,oBACEhB,OAAA;IAAK+C,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBhD,OAAA;MAAAgD,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BpD,OAAA;MAAK+C,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBhD,OAAA;QAAOqD,OAAO,EAAC,gBAAgB;QAAAL,QAAA,EAAC;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnFpD,OAAA;QACEsD,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,gBAAgB;QACnB1B,KAAK,EAAE1B,aAAc;QACrBqD,QAAQ,EAAGC,CAAC,IAAKrD,gBAAgB,CAACqD,CAAC,CAACC,MAAM,CAAC7B,KAAK,CAAE;QAClD8B,WAAW,EAAC;MAAqB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eAEFpD,OAAA;QAAOqD,OAAO,EAAC,gBAAgB;QAAAL,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5DpD,OAAA,CAACF,MAAM;QACLyD,EAAE,EAAC,gBAAgB;QACnBK,OAAO,EAAEnD,SAAU;QACnBoB,KAAK,EAAEpB,SAAS,CAACoD,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACjC,KAAK,KAAKxB,eAAe,CAAE;QACpEmD,QAAQ,EAAGO,cAAc,IAAK;UAC5BzD,kBAAkB,CAAC,CAAAyD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAElC,KAAK,KAAI,EAAE,CAAC;UAC/CrB,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;QACvB,CAAE;QACFmD,WAAW,EAAC,qBAAqB;QACjCK,WAAW;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eAEFpD,OAAA;QAAOqD,OAAO,EAAC,aAAa;QAAAL,QAAA,EAAC;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAChEpD,OAAA,CAACF,MAAM;QACLyD,EAAE,EAAC,aAAa;QAChBK,OAAO,EAAEjD,KAAM;QACfkB,KAAK,EAAElB,KAAK,CAACkD,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACjC,KAAK,KAAKtB,YAAY,CAAE;QAC7DiD,QAAQ,EAAGO,cAAc,IAAK;UAC5BvD,eAAe,CAAC,CAAAuD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAElC,KAAK,KAAI,EAAE,CAAC;UAC5CzB,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;QACxB,CAAE;QACF6D,aAAa,EAAGC,UAAU,IAAK9D,gBAAgB,CAAC8D,UAAU,CAAE,CAAC;QAAA;QAC7DP,WAAW,EAAC,+BAA+B;QAC3CK,WAAW;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eAEFpD,OAAA;QAAQmE,OAAO,EAAE7B,aAAc;QAAAU,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,EAELvC,MAAM,iBACLb,OAAA;MAAK+C,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrBhD,OAAA;QAAAgD,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBpD,OAAA;QAAAgD,QAAA,EAAMnC;MAAM;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CACN,EAEArC,KAAK,iBAAIf,OAAA;MAAK+C,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEjC;IAAK;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;AAAClD,EAAA,CAlIQD,GAAG;AAAAmE,EAAA,GAAHnE,GAAG;AAoIZ,eAAeA,GAAG;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}