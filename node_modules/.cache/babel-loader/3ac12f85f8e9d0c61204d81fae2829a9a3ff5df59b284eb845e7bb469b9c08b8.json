{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\weather-prediction\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [resolvedTown, setResolvedTown] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [towns, setTowns] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries and towns/cities when the component loads\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        // Fetch countries\n        const countryResponse = await fetch('http://127.0.0.1:5000/countries');\n        const countryData = await countryResponse.json();\n        if (countryResponse.ok) {\n          setCountries(countryData.countries.map(country => ({\n            value: country,\n            label: country.charAt(0).toUpperCase() + country.slice(1)\n          })));\n        } else {\n          setError(countryData.error || 'Failed to fetch countries.');\n        }\n\n        // Fetch towns/cities\n        const townResponse = await fetch('http://127.0.0.1:5000/towns');\n        const townData = await townResponse.json();\n        if (townResponse.ok) {\n          setTowns(townData.towns.map(town => ({\n            value: town,\n            label: town.charAt(0).toUpperCase() + town.slice(1)\n          })));\n        } else {\n          setError(townData.error || 'Failed to fetch towns.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n    fetchLocations();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n    if (!locationInput && !resolvedCountry && !resolvedTown) {\n      setError('Please enter a location, select a country, or select/type a town/city.');\n      return;\n    }\n    try {\n      let location = resolvedTown || resolvedCountry;\n\n      // If user input is provided, resolve it to a location using the backend\n      if (locationInput) {\n        const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(locationInput)}`);\n        const resolveData = await resolveResponse.json();\n        if (!resolveResponse.ok) {\n          setError(resolveData.error || 'Failed to resolve location.');\n          return;\n        }\n        location = resolveData.country || resolveData.town; // Resolve to town or country\n      }\n\n      // Fetch predictions for the resolved location\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(location)}`);\n      const predictData = await predictResponse.json();\n      if (predictResponse.ok) {\n        const {\n          average,\n          max,\n          min\n        } = predictData.summary;\n        setResult(`Predicted data for ${location}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"location-input\",\n        children: \"Enter Location (e.g., Zip Code, GPS, City):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"location-input\",\n        value: locationInput,\n        onChange: e => setLocationInput(e.target.value),\n        placeholder: \"Enter location here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-select\",\n        children: \"Or Select a Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"country-select\",\n        options: countries,\n        value: countries.find(option => option.value === resolvedCountry),\n        onChange: selectedOption => {\n          setResolvedCountry((selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) || '');\n          setResolvedTown(''); // Clear town when a new country is selected\n        },\n        placeholder: \"Select a country...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"town-select\",\n        children: \"Select or Type a Town/City:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"town-select\",\n        options: towns,\n        value: towns.find(option => option.value === resolvedTown),\n        onChange: selectedOption => {\n          setResolvedTown((selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) || '');\n          setLocationInput(''); // Clear manual input when a town is selected\n        },\n        onInputChange: inputValue => setLocationInput(inputValue) // Update input dynamically\n        ,\n        placeholder: \"Select or type a town/city...\",\n        isClearable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"htwIPsOhrQOBDrpaUKxaZM4yDs4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","App","_s","locationInput","setLocationInput","resolvedCountry","setResolvedCountry","resolvedTown","setResolvedTown","countries","setCountries","towns","setTowns","result","setResult","error","setError","fetchLocations","countryResponse","fetch","countryData","json","ok","map","country","value","label","charAt","toUpperCase","slice","townResponse","townData","town","err","handlePredict","location","resolveResponse","encodeURIComponent","resolveData","predictResponse","predictData","average","max","min","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","e","target","placeholder","options","find","option","selectedOption","onInputChange","inputValue","isClearable","onClick","_c","$RefreshReg$"],"sources":["D:/downloads/weather-prediction/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport './App.css';\n\nfunction App() {\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [resolvedTown, setResolvedTown] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [towns, setTowns] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries and towns/cities when the component loads\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        // Fetch countries\n        const countryResponse = await fetch('http://127.0.0.1:5000/countries');\n        const countryData = await countryResponse.json();\n        if (countryResponse.ok) {\n          setCountries(countryData.countries.map((country) => ({\n            value: country,\n            label: country.charAt(0).toUpperCase() + country.slice(1),\n          })));\n        } else {\n          setError(countryData.error || 'Failed to fetch countries.');\n        }\n\n        // Fetch towns/cities\n        const townResponse = await fetch('http://127.0.0.1:5000/towns');\n        const townData = await townResponse.json();\n        if (townResponse.ok) {\n          setTowns(townData.towns.map((town) => ({\n            value: town,\n            label: town.charAt(0).toUpperCase() + town.slice(1),\n          })));\n        } else {\n          setError(townData.error || 'Failed to fetch towns.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n\n    fetchLocations();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n\n    if (!locationInput && !resolvedCountry && !resolvedTown) {\n      setError('Please enter a location, select a country, or select/type a town/city.');\n      return;\n    }\n\n    try {\n      let location = resolvedTown || resolvedCountry;\n\n      // If user input is provided, resolve it to a location using the backend\n      if (locationInput) {\n        const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(locationInput)}`);\n        const resolveData = await resolveResponse.json();\n\n        if (!resolveResponse.ok) {\n          setError(resolveData.error || 'Failed to resolve location.');\n          return;\n        }\n        location = resolveData.country || resolveData.town; // Resolve to town or country\n      }\n\n      // Fetch predictions for the resolved location\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(location)}`);\n      const predictData = await predictResponse.json();\n\n      if (predictResponse.ok) {\n        const { average, max, min } = predictData.summary;\n        setResult(`Predicted data for ${location}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Weather Prediction</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"location-input\">Enter Location (e.g., Zip Code, GPS, City):</label>\n        <input\n          type=\"text\"\n          id=\"location-input\"\n          value={locationInput}\n          onChange={(e) => setLocationInput(e.target.value)}\n          placeholder=\"Enter location here\"\n        />\n\n        <label htmlFor=\"country-select\">Or Select a Country:</label>\n        <Select\n          id=\"country-select\"\n          options={countries}\n          value={countries.find((option) => option.value === resolvedCountry)}\n          onChange={(selectedOption) => {\n            setResolvedCountry(selectedOption?.value || '');\n            setResolvedTown(''); // Clear town when a new country is selected\n          }}\n          placeholder=\"Select a country...\"\n        />\n\n        <label htmlFor=\"town-select\">Select or Type a Town/City:</label>\n        <Select\n          id=\"town-select\"\n          options={towns}\n          value={towns.find((option) => option.value === resolvedTown)}\n          onChange={(selectedOption) => {\n            setResolvedTown(selectedOption?.value || '');\n            setLocationInput(''); // Clear manual input when a town is selected\n          }}\n          onInputChange={(inputValue) => setLocationInput(inputValue)} // Update input dynamically\n          placeholder=\"Select or type a town/city...\"\n          isClearable\n        />\n\n        <button onClick={handlePredict}>Get Prediction</button>\n      </div>\n\n      {result && (\n        <div className=\"result\">\n          <h3>Predicted Data</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}