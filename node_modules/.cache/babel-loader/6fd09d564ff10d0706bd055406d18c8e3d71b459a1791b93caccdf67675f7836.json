{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\weather-prediction\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries when the component loads\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/countries');\n        const data = await response.json();\n        if (response.ok) {\n          setCountries(data.countries); // Populate dropdown with countries\n        } else {\n          setError(data.error || 'Failed to fetch countries.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n    fetchCountries();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n    if (!locationInput && !resolvedCountry) {\n      setError('Please enter a location or select a country.');\n      return;\n    }\n    try {\n      let country = resolvedCountry;\n\n      // If user input is provided, resolve it to a country using the backend\n      if (locationInput) {\n        const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(locationInput)}`);\n        const resolveData = await resolveResponse.json();\n        if (!resolveResponse.ok) {\n          setError(resolveData.error || 'Failed to resolve location.');\n          return;\n        }\n        country = resolveData.country;\n      }\n\n      // Fetch predictions for the resolved country\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(country)}`);\n      const predictData = await predictResponse.json();\n      if (predictResponse.ok) {\n        const {\n          average,\n          max,\n          min\n        } = predictData.summary;\n        setResult(`Predicted data for ${country}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"location-input\",\n        children: \"Enter Location (e.g., Zip Code, GPS, City):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"location-input\",\n        value: locationInput,\n        onChange: e => setLocationInput(e.target.value),\n        placeholder: \"Enter location here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-select\",\n        children: \"Or Select a Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"country-select\",\n        value: resolvedCountry,\n        onChange: e => setResolvedCountry(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select a Country --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: [country.charAt(0).toUpperCase() + country.slice(1), \" \"]\n        }, country, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GUKW3EgzuDJ8oESRPyqJJcF+x8k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","locationInput","setLocationInput","resolvedCountry","setResolvedCountry","countries","setCountries","result","setResult","error","setError","fetchCountries","response","fetch","data","json","ok","err","handlePredict","country","resolveResponse","encodeURIComponent","resolveData","predictResponse","predictData","average","max","min","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","placeholder","map","charAt","toUpperCase","slice","onClick","_c","$RefreshReg$"],"sources":["D:/downloads/weather-prediction/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [locationInput, setLocationInput] = useState('');\n  const [resolvedCountry, setResolvedCountry] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries when the component loads\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/countries');\n        const data = await response.json();\n        if (response.ok) {\n          setCountries(data.countries); // Populate dropdown with countries\n        } else {\n          setError(data.error || 'Failed to fetch countries.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n\n    fetchCountries();\n  }, []);\n\n  // Handle prediction\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n\n    if (!locationInput && !resolvedCountry) {\n      setError('Please enter a location or select a country.');\n      return;\n    }\n\n    try {\n      let country = resolvedCountry;\n\n      // If user input is provided, resolve it to a country using the backend\n      if (locationInput) {\n        const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(locationInput)}`);\n        const resolveData = await resolveResponse.json();\n\n        if (!resolveResponse.ok) {\n          setError(resolveData.error || 'Failed to resolve location.');\n          return;\n        }\n        country = resolveData.country;\n      }\n\n      // Fetch predictions for the resolved country\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(country)}`);\n      const predictData = await predictResponse.json();\n\n      if (predictResponse.ok) {\n        const { average, max, min } = predictData.summary;\n        setResult(`Predicted data for ${country}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Weather Prediction</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"location-input\">Enter Location (e.g., Zip Code, GPS, City):</label>\n        <input\n          type=\"text\"\n          id=\"location-input\"\n          value={locationInput}\n          onChange={(e) => setLocationInput(e.target.value)}\n          placeholder=\"Enter location here\"\n        />\n\n        <label htmlFor=\"country-select\">Or Select a Country:</label>\n        <select\n          id=\"country-select\"\n          value={resolvedCountry}\n          onChange={(e) => setResolvedCountry(e.target.value)}\n        >\n          <option value=\"\">-- Select a Country --</option>\n          {countries.map((country) => (\n            <option key={country} value={country}>\n              {country.charAt(0).toUpperCase() + country.slice(1)} {/* Capitalize */}\n            </option>\n          ))}\n        </select>\n\n        <button onClick={handlePredict}>Get Prediction</button>\n      </div>\n\n      {result && (\n        <div className=\"result\">\n          <h3>Predicted Data</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}