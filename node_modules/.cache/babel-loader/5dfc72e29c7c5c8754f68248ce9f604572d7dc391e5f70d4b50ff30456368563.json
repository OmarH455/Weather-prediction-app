{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\weather-prediction\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [countryName, setCountryName] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries when the component loads\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/countries');\n        const data = await response.json();\n        if (response.ok) {\n          setCountries(data.countries); // Populate dropdown with countries\n        } else {\n          setError(data.error || 'Failed to fetch countries.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n    fetchCountries();\n  }, []);\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n    if (!countryName) {\n      setError('Please enter a location.');\n      return;\n    }\n    try {\n      // Resolve the location (Zip Code/GPS/etc.) into a country\n      const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(countryName)}`);\n      const resolveData = await resolveResponse.json();\n      if (!resolveResponse.ok) {\n        setError(resolveData.error || 'Failed to resolve location.');\n        return;\n      }\n      const resolvedCountry = resolveData.country;\n\n      // Fetch predictions using the resolved country\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(resolvedCountry)}`);\n      const predictData = await predictResponse.json();\n      if (predictResponse.ok) {\n        const {\n          average,\n          max,\n          min\n        } = predictData.summary;\n        setResult(`Predicted data for ${resolvedCountry}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country\",\n        children: \"Select Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"country\",\n        value: countryName,\n        onChange: e => setCountryName(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select a Country --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: [country.charAt(0).toUpperCase() + country.slice(1), \" \"]\n        }, country, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8uHedsN63zy2Dh1nC1rKJYUUu0Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","countryName","setCountryName","countries","setCountries","result","setResult","error","setError","fetchCountries","response","fetch","data","json","ok","err","handlePredict","resolveResponse","encodeURIComponent","resolveData","resolvedCountry","country","predictResponse","predictData","average","max","min","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","map","charAt","toUpperCase","slice","onClick","_c","$RefreshReg$"],"sources":["D:/downloads/weather-prediction/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [countryName, setCountryName] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries when the component loads\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/countries');\n        const data = await response.json();\n        if (response.ok) {\n          setCountries(data.countries); // Populate dropdown with countries\n        } else {\n          setError(data.error || 'Failed to fetch countries.');\n        }\n      } catch (err) {\n        setError('Unable to connect to the server. Please try again later.');\n      }\n    };\n\n    fetchCountries();\n  }, []);\n\n  const handlePredict = async () => {\n    setResult(null);\n    setError(null);\n  \n    if (!countryName) {\n      setError('Please enter a location.');\n      return;\n    }\n  \n    try {\n      // Resolve the location (Zip Code/GPS/etc.) into a country\n      const resolveResponse = await fetch(`http://127.0.0.1:5000/resolve_location?input=${encodeURIComponent(countryName)}`);\n      const resolveData = await resolveResponse.json();\n  \n      if (!resolveResponse.ok) {\n        setError(resolveData.error || 'Failed to resolve location.');\n        return;\n      }\n  \n      const resolvedCountry = resolveData.country;\n  \n      // Fetch predictions using the resolved country\n      const predictResponse = await fetch(`http://127.0.0.1:5000/predict?country=${encodeURIComponent(resolvedCountry)}`);\n      const predictData = await predictResponse.json();\n  \n      if (predictResponse.ok) {\n        const { average, max, min } = predictData.summary;\n        setResult(`Predicted data for ${resolvedCountry}:\\nAverage Temperature: ${average}\\nMaximum Temperature: ${max}\\nMinimum Temperature: ${min}`);\n      } else {\n        setError(predictData.error || 'An error occurred while fetching the prediction.');\n      }\n    } catch (err) {\n      setError('Unable to connect to the server. Please try again later.');\n    }\n  };\n  \n  return (\n    <div className=\"container\">\n      <h1>Weather Prediction</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"country\">Select Country:</label>\n        <select\n          id=\"country\"\n          value={countryName}\n          onChange={(e) => setCountryName(e.target.value)}\n        >\n          <option value=\"\">-- Select a Country --</option>\n          {countries.map((country) => (\n            <option key={country} value={country}>\n              {country.charAt(0).toUpperCase() + country.slice(1)} {/* Capitalize country name */}\n            </option>\n          ))}\n        </select>\n        <button onClick={handlePredict}>Get Prediction</button>\n      </div>\n\n      {result && (\n        <div className=\"result\">\n          <h3>Predicted Data</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}